{"version":3,"sources":["redux/actions.js","components/ContactsForm/ContactsForm.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","components/ContactList/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js","components/ContactsForm/ContactsForm.module.css","components/ContactList/ContactList.module.css"],"names":["addContact","createAction","deleteContact","setFilter","ContactsForm","useForm","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","className","s","form","onSubmit","data","id","uuid","label","type","title","required","pattern","name","error","number","Button","variant","size","endIcon","ContactItem","contact","handleDelItem","item","IconButton","onClick","ContactList","contacts","useSelector","state","filter","toLocaleLowerCase","includes","toLowerCase","map","Filter","value","TextField","onChange","e","target","App","contactReducer","createReducer","payload","some","el","alert","filterReducer","rootReducer","combineReducers","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.653a945e.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n// import { types } from '../redux/types';\r\n\r\nexport const addContact = createAction('contacts/add');\r\nexport const deleteContact = createAction('contacts/del');\r\nexport const setFilter = createAction('filter/set');\r\n\r\n// export function addContact(payload) {\r\n//   return { type: types.ADD_CONTACT, payload };\r\n// }\r\n// export function deleteContact(payload) {\r\n//   return { type: types.DELETE_CONTACT, payload };\r\n// }\r\n\r\n// export function setFilter(payload) {\r\n//   return { type: types.SET_FILTER, payload };\r\n// }\r\n","import { v4 as uuid } from 'uuid';\r\n// import PropTypes from 'prop-types';\r\nimport Button from '@mui/material/Button';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport s from './ContactsForm.module.css';\r\nimport { addContact } from '../../redux/actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nexport default function ContactsForm() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = data => {\r\n    dispatch(addContact({ ...data, id: uuid() }));\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit(onSubmit)}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          {...register('name', {\r\n            required: true,\r\n            pattern:\r\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n          })}\r\n        />\r\n        {errors?.name?.type === 'required' && (\r\n          <p className={s.error}>This field is required</p>\r\n        )}\r\n        {errors?.name?.type === 'pattern' && (\r\n          <p className={s.error}>Alphabetical characters only</p>\r\n        )}\r\n      </label>\r\n\r\n      <label className={s.label}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          {...register('number', {\r\n            required: true,\r\n            pattern:\r\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n          })}\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        />\r\n        {errors?.number?.type === 'required' && (\r\n          <p className={s.error}>This field is required</p>\r\n        )}\r\n        {errors?.number?.type === 'pattern' && (\r\n          <p className={s.error}>Numeric characters only</p>\r\n        )}\r\n      </label>\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"submit\"\r\n        size=\"small\"\r\n        endIcon={<SendIcon />}\r\n      >\r\n        Add contact\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// const mapToDispatchProps = dispatch => ({\r\n//   addNewContact: contact => dispatch(addContact(contact)),\r\n// });\r\n// export default connect(null, mapToDispatchProps)(ContactsForm);\r\n\r\n// ContactsForm.propTypes = {\r\n//   addNewContact: PropTypes.func.isRequired,\r\n// };\r\n","import IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport s from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nexport default function ContactItem({ contact, handleDelItem }) {\r\n  return (\r\n    <li className={s.item}>\r\n      <span>\r\n        {contact.name}: <span>{contact.number}</span>\r\n      </span>\r\n      <IconButton aria-label=\"delete\" id={contact.id} onClick={handleDelItem}>\r\n        <DeleteIcon />\r\n      </IconButton>\r\n    </li>\r\n  );\r\n}\r\nContactItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    id: PropTypes.string,\r\n  }),\r\n  handleDelItem: PropTypes.func,\r\n};\r\n","import ContactItem from './ContactItem';\r\nimport s from './ContactList.module.css';\r\n// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/actions';\r\nexport default function ContactList({ handleDelItem }) {\r\n  const contacts = useSelector(state =>\r\n    state.contacts.filter(contact =>\r\n      contact.name.toLocaleLowerCase().includes(state.filter.toLowerCase()),\r\n    ),\r\n  );\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <h2 className={s.title}>Contacts</h2>\r\n      <ul>\r\n        {contacts.map(contact => (\r\n          <ContactItem\r\n            key={contact.id}\r\n            contact={contact}\r\n            handleDelItem={() => dispatch(deleteContact(contact.id))}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.array,\r\n//   handleDelItem: PropTypes.func,\r\n// };\r\n// const mapStateToProps = state => ({\r\n//   contacts: state.contacts.filter(contact =>\r\n//     contact.name.toLocaleLowerCase().includes(state.filter.toLowerCase()),\r\n//   ),\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   handleDelItem: id => dispatch(deleteContact(id)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import TextField from '@mui/material/TextField';\r\n// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setFilter } from '../../redux/actions';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(state => state.filter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <TextField\r\n        id=\"standard-search\"\r\n        label=\"Find contacts by name\"\r\n        type=\"search\"\r\n        variant=\"standard\"\r\n        value={value}\r\n        onChange={e => dispatch(setFilter(e.target.value))}\r\n      />\r\n    </>\r\n  );\r\n}\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string,\r\n//   handlChange: PropTypes.func,\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: state.filter,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   handleChange: e => dispatch(setFilter(e.target.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import ContactsForm from './components/ContactsForm/ContactsForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport Filter from './components/ContactList/Filter';\r\n\r\nexport default function App() {\r\n  // componentDidMount() {\r\n  //   const data = localStorage.getItem('contacts');\r\n  //   const parsedData = JSON.parse(data);\r\n  //   if (parsedData) {\r\n  //     this.setState({ contacts: parsedData });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevPropos, prevState) {\r\n  //   if (prevState.contacts !== this.state.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1 className=\"appTitle\">Phonebook</h1>\r\n      <ContactsForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","// import { types } from '../redux/types';\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, setFilter } from './actions';\r\n\r\nconst initialContacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst contactReducer = createReducer(initialContacts, {\r\n  [addContact]: (state, { payload }) => {\r\n    const existContact = state.some(\r\n      el => el.name.toLowerCase() === payload.name.toLowerCase(),\r\n    );\r\n    if (existContact) {\r\n      alert(`this contact already exists`);\r\n      return state;\r\n    } else {\r\n      return [...state, payload];\r\n    }\r\n  },\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [setFilter]: (state, { payload }) => (state = payload),\r\n});\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactReducer,\r\n  filter: filterReducer,\r\n});\r\nexport default rootReducer;\r\n\r\n// const contactReducer = (state = initialContacts, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT:\r\n//       const existContact = state.some(\r\n//         el => el.name.toLowerCase() === payload.name.toLowerCase(),\r\n//       );\r\n//       if (existContact) {\r\n//         alert(`this contact already exists`);\r\n//         return state;\r\n//       } else {\r\n//         return [...state, payload];\r\n//       }\r\n//     case types.DELETE_CONTACT:\r\n//       return state.filter(contact => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.SET_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\n// import { createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n  key: 'сontacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n// const middleware = [ ...getDefaultMiddleware({serializableCheck: {\r\n//     ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//   }})\r\n\r\n// ]\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\nexport const persistor = persistStore(store);\r\n\r\n// export const store = createStore(rootReducer, composeWithDevTools());\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport App from './App';\r\nimport { store, persistor } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={<p>Loading...</p>} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// // If you want to start measuring performance in your app, pass a function\r\n// // to log results (for example: reportWebVitals(console.log))\r\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__M96xx\",\"label\":\"ContactsForm_label__3pJFc\",\"error\":\"ContactsForm_error__3rtGx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactList_title__2Jsga\",\"item\":\"ContactList_item__3MYQO\"};"],"sourceRoot":""}